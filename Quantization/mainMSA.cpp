#include <bits/stdc++.h>
#include <msa.h>

#define SIZE_W 20 
#define SIZE_H 18 

typedef unsigned char byte; 

byte red[SIZE_H][SIZE_W] = {{248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}, {248, 249, 253, 254, 255, 237, 253, 252, 168, 71, 14, 0, 8, 2, 0, 50, 192, 238, 251, 252}}; 
byte green[SIZE_H][SIZE_W] = {{2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}, {2, 5, 1, 0, 0, 14, 115, 233, 255, 247, 245, 255, 251, 166, 37, 0, 0, 15, 5, 0}}; 
byte blue[SIZE_H][SIZE_W] = {{5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}, {5, 0, 0, 10, 13, 0, 0, 19, 6, 1, 45, 132, 229, 255, 238, 255, 255, 217, 106, 27}}; 

void msaVersion(byte** red, byte** green, byte** blue, int crop_bits){
		v16u8 *pR = (v16u8*)(&red[0]);
        v16u8 *pG = (v16u8*)(&green[0]);
        v16u8 *pB = (v16u8*)(&blue[0]);
        
        v16u8 newR, newG, newB;

        v16u8 *pMax = pR + (SIZE_W * SIZE_H / 16); 
        for(;pR <= pMax; ++pR, ++pG, ++pB){
            newR = (*(pR) << crop_bits) >> crop_bits; 
            newG = (*(pG) << crop_bits) >> crop_bits;
            newB = (*(pB) << crop_bits) >> crop_bits;
        }
}

int main(){ 
	msaVersion(red, green, blue, 2);
	return 0; 
}
