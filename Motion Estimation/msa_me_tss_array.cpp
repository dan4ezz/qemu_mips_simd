#include <string>
#include <cmath>
#include <iostream>
#include <climits>
#include "bitmap_image.hpp"
#include <msa.h>

int red_curr[256] = {};
int green_curr[256] = {};
int blue_curr[256] = {};
int red_prevv[256] = {118, 118, 116, 116, 116, 116, 116, 116, 117, 117, 119, 119, 120, 120, 120, 120, 118, 118, 116, 116, 116, 116, 116, 116, 117, 117, 119, 119, 120, 120, 120, 120, 118, 118, 116, 116, 116, 116, 116, 116, 117, 117, 119, 119, 120, 120, 120, 120, 118, 118, 116, 116, 116, 116, 116, 116, 116, 116, 118, 118, 118, 119, 119, 119, 118, 117, 115, 115, 115, 115, 114, 114, 116, 116, 116, 118, 118, 118, 119, 119, 117, 117, 115, 115, 115, 115, 114, 114, 115, 115, 115, 115, 117, 117, 118, 118, 117, 117, 115, 115, 115, 115, 114, 114, 114, 114, 115, 115, 117, 117, 117, 117, 117, 117, 115, 115, 115, 115, 114, 114, 114, 114, 115, 115, 115, 117, 117, 117, 117, 117, 115, 115, 115, 115, 114, 114, 114, 114, 114, 115, 115, 115, 115, 117, 117, 117, 115, 115, 115, 115, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 117, 117, 115, 115, 115, 115, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 117, 117, 115, 115, 115, 115, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 117, 117, 115, 115, 115, 115, 114, 114, 112, 112, 113, 113, 113, 113, 113, 114, 117, 117, 115, 115, 115, 115, 114, 114, 112, 112, 113, 113, 113, 113, 113, 113, 117, 117, 115, 115, 115, 115, 114, 114, 112, 112, 112, 112, 113, 113, 113, 113, 117, 117, 115, 115, 115, 115, 114, 114, 113, 112, 112, 112, 113, 113, 113, 113};
int green_prevv[256] = {211, 211, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 210, 210, 210, 211, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 211, 211, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 210, 210, 210, 210, 210, 210, 209, 209, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 211, 211, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 211, 211, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 210, 210, 210, 210, 210, 209, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 211, 211, 210, 211, 211, 211, 210, 210, 210, 210};
int blue_prevv[256] = {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253};

int zeros[8] = {0, 0, 0, 0, 0, 0, 0, 0};
long cost_func(int x1, int y1, int x2, int y2, int size){
    long error = 0;
    int i1 = x2;
    int j1 = y2;
    v8i16 red_prev = *(v8i16*)zeros;
    v8i16 green_prev = *(v8i16*)zeros;
    v8i16 blue_prev = *(v8i16*)zeros;
    v8i16 red_cur = *(v8i16*)zeros;
    v8i16 green_cur = *(v8i16*)zeros;
    v8i16 blue_cur = *(v8i16*)zeros;
    v8i16 red_error;
    v8i16 green_error;
    v8i16 blue_error;
    v8i16 acc = *(v8i16*)zeros;
    for(int i = x1; i < x1 + size*size; i+=8){
            red_prev+=(*(v8i16*)(red_prevv+(i-x1)));
            green_prev+=(*(v8i16*)(green_prevv+(i-x1)));
            blue_prev+=(*(v8i16*)(blue_prevv+(i-x1)));
            red_cur+=(*(v8i16*)(red_curr+(i-x1)));
            green_cur+=(*(v8i16*)(green_curr+(i-x1)));
            blue_cur+=(*(v8i16*)(blue_curr+(i-x1)));
        }
    red_error = __builtin_msa_asub_s_h(red_prev, red_cur);
    green_error = __builtin_msa_asub_s_h(green_prev, green_cur);
    blue_error = __builtin_msa_asub_s_h(blue_prev, blue_cur);
    acc+=red_error;
    acc+=green_error;
    acc+=blue_error;
    for(int k = 0; k < 8; k++){
        error+=int(acc[k]);
    }    
    return error;
}

int main(){
    int block_size = 16;
    int p = 8;
    int L = floor(log2(p+1));
    int step_max = pow(2,(L-1));
    int step_size;
    int x, y;
    int cost_col, cost_row;
    long costs[3][3];
    int row = 640;
    int col = 360;
		for(int i = 0; i < row/20; i += block_size){
    	for (int j = 0; j < (col - 7)/20; j += block_size){
            x = i;
            y = j;
            if(j!=352) costs[1][1] = cost_func(i, j, i, j, block_size);
            step_size = step_max;
            while(step_size >= 1){
              int dy=0, dx=0;
              for(int l = 0; l < 3; l++){
                for(int k = 0; k < 3; k++){
                  if(l != 1 && k != 1)
                    costs[l][k]=9999999;
                }
              }
                for(int m = -step_size; m <= step_size; m += step_size){
                    for(int n = -step_size; n <= step_size; n += step_size){
												int ref_block_hor = x + m;
                        int ref_block_ver = y + n;
                        if (ref_block_ver < 0 || ref_block_hor < 0 ||
                                ref_block_ver + block_size > col ||
                                ref_block_hor + block_size > row)
                                  continue;
                            cost_row = m/step_size + 1;
                            cost_col = n/step_size + 1;
                        if (cost_row == 1 && cost_col == 1 && j != 352)
                            continue;
                        costs[cost_row][cost_col] = cost_func(i, j, ref_block_hor, ref_block_ver, block_size);
                    }
                }
								double min = 99999;
									for (int a = 0; a < 3; a++){
										for(int b = 0; b < 3; b++){
											if (costs[a][b] < min){
												min = costs[a][b];
												dx = a;
												dy = b;
											}
										}
									}
                if (costs[1][1] == min){
                  dx = 1;
                  dy = 1;
                }
                x = x + (dx - 1)*step_size;
                y = y + (dy - 1)*step_size;
                step_size/=2;
                costs[1][1] = costs[dx][dy];
            }
            }
        }
 		std::cout << "end" << '\n';
 }
